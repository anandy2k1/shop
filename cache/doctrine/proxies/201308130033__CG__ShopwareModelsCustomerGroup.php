<?php

namespace Shopware\Proxies\__CG__\Shopware\Models\Customer;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Group extends \Shopware\Models\Customer\Group implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setKey($key)
    {
        $this->__load();
        return parent::setKey($key);
    }

    public function getKey()
    {
        $this->__load();
        return parent::getKey();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setTax($tax)
    {
        $this->__load();
        return parent::setTax($tax);
    }

    public function getTax()
    {
        $this->__load();
        return parent::getTax();
    }

    public function setTaxInput($taxInput)
    {
        $this->__load();
        return parent::setTaxInput($taxInput);
    }

    public function getTaxInput()
    {
        $this->__load();
        return parent::getTaxInput();
    }

    public function setMode($mode)
    {
        $this->__load();
        return parent::setMode($mode);
    }

    public function getMode()
    {
        $this->__load();
        return parent::getMode();
    }

    public function setDiscount($discount)
    {
        $this->__load();
        return parent::setDiscount($discount);
    }

    public function getDiscount()
    {
        $this->__load();
        return parent::getDiscount();
    }

    public function setMinimumOrder($minimumOrder)
    {
        $this->__load();
        return parent::setMinimumOrder($minimumOrder);
    }

    public function getMinimumOrder()
    {
        $this->__load();
        return parent::getMinimumOrder();
    }

    public function setMinimumOrderSurcharge($minimumOrderSurcharge)
    {
        $this->__load();
        return parent::setMinimumOrderSurcharge($minimumOrderSurcharge);
    }

    public function getMinimumOrderSurcharge()
    {
        $this->__load();
        return parent::getMinimumOrderSurcharge();
    }

    public function getDiscounts()
    {
        $this->__load();
        return parent::getDiscounts();
    }

    public function setDiscounts($discounts)
    {
        $this->__load();
        return parent::setDiscounts($discounts);
    }

    public function getAttribute()
    {
        $this->__load();
        return parent::getAttribute();
    }

    public function setAttribute($attribute)
    {
        $this->__load();
        return parent::setAttribute($attribute);
    }

    public function toArray()
    {
        $this->__load();
        return parent::toArray();
    }

    public function fromArray(array $array = array (
))
    {
        $this->__load();
        return parent::fromArray($array);
    }

    public function setOneToOne($data, $model, $property, $reference = NULL)
    {
        $this->__load();
        return parent::setOneToOne($data, $model, $property, $reference);
    }

    public function setOneToMany($data, $model, $property, $reference = NULL)
    {
        $this->__load();
        return parent::setOneToMany($data, $model, $property, $reference);
    }

    public function setManyToOne($data, $model, $property)
    {
        $this->__load();
        return parent::setManyToOne($data, $model, $property);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'key', 'name', 'tax', 'taxInput', 'mode', 'discount', 'minimumOrder', 'minimumOrderSurcharge', 'discounts', 'attribute', 'customers');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}